[
    {
        "title": "**Setup workspace**",
        "body": "First, make an empty folder and cd into that folder at the command-line. Run e2projectmanager.py. While a GUI window will appear, messages may appear in the terminal used to launch the program, so it is useful to keep this window visible.\r\n\n\nClick the"
    },
    {
        "title": "**Workflow Mode**",
        "body": "drop-down menu next to navigate to the TomoSeg panel. \r\n\n\n<a href=\"#figures\" data-url=\"http://www.nature.com/protocolexchange/system/uploads/5817/original/switchpanel.png\">See figure in Figures section.</a>"
    },
    {
        "title": "**Import Tomograms**",
        "body": "Click"
    },
    {
        "title": "**Import Tomogram Files**",
        "body": "on the left panel \\(1). On the panel showed up on the right, click"
    },
    {
        "title": "**Browse**",
        "body": "next to import_files \\(2), select the tomogram you would like to segment in the browser window, and click"
    },
    {
        "title": "**Ok**",
        "body": ". If you want to downsample/bin the tomogram before processing, write the shrink factor in appropriate box \\(3). For example, you might wish to reduce a 4k x 4k tomogram to 1k x 1k for efficiency. In this case you would enter 4 in the text box. Also make sure that the"
    },
    {
        "title": "**import_tomos**",
        "body": "and"
    },
    {
        "title": "**tomoseg_auto**",
        "body": "box is checked. Finally, click"
    },
    {
        "title": "**Launch**",
        "body": "\\(4) and wait for pre-processing to finish. \r\n\n\n<a href=\"#figures\" data-url=\"http://www.nature.com/protocolexchange/system/uploads/5819/original/importtomo.png\">See figure in Figures section.</a>"
    },
    {
        "title": "**Select Positive Examples**",
        "body": "Select"
    },
    {
        "title": "**Box training references**",
        "body": ". Press browse, and select an imported tomogram. Leave"
    },
    {
        "title": "**boxsize**",
        "body": "as -1, and press Launch. \r\n\n\nIn a moment, three windows will appear: the tomogram view, the selected particles view, and a control-panel. Unlike the 2-D particle picking interface used in single particle analysis, which is almost identical, this program allows you to move through the various slices of the tomogram. The examples you select will be 2-D, drawn from arbitrary slices throughout the 3-D tomogram. \r\n\n\nIn the window named"
    },
    {
        "title": "**e2boxer**",
        "body": [
            ", make sure your box size is",
            {
                "title": "64.",
                "body": "None of the other options need to be changed. \r\n\n\nIn the window containing your tomogram, you can begin selecting boxes. You can move through the slices of the tomogram with the up and down arrows, and zoom in and out with the scroll wheel. Alternatively, you can middle-click on the image to open a control-panel containing sliders with similar functionality. Select and reposition regions of interest \\(ROIs) with the left mouse button. Hold down shift when clicking to delete existing ROIs. As you select regions, they will appear in the \\(Particles) window. \r\n\n\nSelect around 10 ROIs containing the feature you wish to annotate. You will repeat this training process from scratch for different features, so for now, focus just on a single feature type. If the same feature appears different in different layers or different regions of the cell, be sure to cover the full range of visual differences in the representative regions you select. \r\n\n\nWhen selecting boxes, ensure that feature is clear in the \\(Particles) window. You will manually identify the feature in the next step, so it is critical that you can accurately identify the feature throughout each ROI. It is better to have fewer ROIs that you can annotate well than more ROIs with ambiguous annotations. \r\n\n\n<a href=\"#figures\" data-url=\"http://www.nature.com/protocolexchange/system/uploads/5821/original/boxptcl.png\">See figure in Figures section.</a>\r\n\n\n\r\n\n\nAfter identifying an appropriate number of boxes, press"
            }
        ]
    },
    {
        "title": "**Write output**",
        "body": [
            "in the e2boxer window.",
            {
                "title": "1.",
                "body": "Select your tomograms in the"
            }
        ]
    },
    {
        "title": "**Raw Data**",
        "body": [
            "window.",
            {
                "title": "2.",
                "body": "Select a suffix for the ROIs in the"
            }
        ]
    },
    {
        "title": "**Output Suffix**",
        "body": [
            "text box \\(perhaps _good).",
            {
                "title": "3.",
                "body": "In"
            }
        ]
    },
    {
        "title": "**Normalize Images**",
        "body": [
            ", select None.",
            {
                "title": "4.",
                "body": "Press"
            }
        ]
    },
    {
        "title": "**OK**",
        "body": ". \r\n  <a href=\"#figures\" data-url=\"http://www.nature.com/protocolexchange/system/uploads/5823/original/genptcls.png\">See figure in Figures section.</a>"
    },
    {
        "title": "**Manually Annotate Samples**",
        "body": "The next step is to manually identify the feature within each ROI.\r\n\n\nNavigate to the"
    },
    {
        "title": "**Segment training references**",
        "body": "interface in the project manager window. For"
    },
    {
        "title": "**Particles**",
        "body": ", browse to the output ROIs you generated in the previous step. \r\n\n\nLeave"
    },
    {
        "title": "**Output**",
        "body": "blank, keep segment checked, and press"
    },
    {
        "title": "**Launch**",
        "body": ". \r\n\n\nTwo windows will appear, one containing images, and the other a control panel. You can navigate through the images similarly to looking through the slices of the tomogram above. The control panel will open with the"
    },
    {
        "title": "**Draw**",
        "body": "tab selected. Using the left mouse button, draw on each of the ROIs to exactly cover the feature of interest as best you can. If necessary you can always can go back to the ROI selection window and check the surroundings of each region to aid in segmentation.\r\n\n\nSegment all of your ROIs. If you need to change the size of the pen, change both"
    },
    {
        "title": "**Pen Size**",
        "body": "and"
    },
    {
        "title": "**Pen Size2**",
        "body": "to a larger or smaller number. You would like the marked region to match the feature as closely as possible, so reduce the pen size if it is larger than the feature. \r\n\n\nWhen you are finished, simply close the windows. The segmentation file will be saved automatically as \"*_seg.hdf\" with the same base file name as your ROIs. \r\n\n\n<a href=\"#figures\" data-url=\"http://www.nature.com/protocolexchange/system/uploads/5825/original/segptcl.png\">See figure in Figures section.</a>"
    },
    {
        "title": "**Select Negative Samples**",
        "body": "Next you need to identify regions in the tomogram which do not contain the feature of interest at all. Return to the same interface you used to select positive examples, and press the"
    },
    {
        "title": "**Clear**",
        "body": "button in the"
    },
    {
        "title": "**e2boxer**",
        "body": "window. This deletes all of your previous selections \\(the positive examples), so make sure you have finished the previous steps before doing this. \r\n\n\nIn the tomogram window, select boxes that DONâ€™T contain the feature of interest. You can select as many of these as you like \\(normally ~100). Try to include a wide variety of different non-feature cellular structures, empty space, gold fiducials and high-contrast carbon. \r\n\n\nAfter finishing picking the negative samples, write the particle output in same way you did for the positive samples, but use a different"
    },
    {
        "title": "**Output Suffix**",
        "body": ", like \"_bad\"."
    },
    {
        "title": "**Build Training Set**",
        "body": [
            {
                "title": "1.",
                "body": "Select the"
            }
        ]
    },
    {
        "title": "**Build training set**",
        "body": [
            "option in the project manager.",
            {
                "title": "2.",
                "body": "In"
            }
        ]
    },
    {
        "title": "**particles_raw**",
        "body": [
            ", select your \"_good\" file.",
            {
                "title": "3.",
                "body": "In"
            }
        ]
    },
    {
        "title": "**particles_label**",
        "body": [
            ", select your \"_good_seg\" file.",
            {
                "title": "4.",
                "body": "In"
            }
        ]
    },
    {
        "title": "**boxes_negative**",
        "body": ", select your \"_bad\" file. \r\n  Leave"
    },
    {
        "title": "**trainset_output blank**",
        "body": ". Ncopy controls the number of particles in your training set. The default of 10 is fine, unless you want a faster run at the expense of accuracy. \r\n\n\nPress"
    },
    {
        "title": "**Launch**",
        "body": ". The program will print \"Done\" in your Terminal when it has finished. The training set will be saved with the same name as the positive particles with \"_trainset\" suffix."
    },
    {
        "title": "**Train Neural Network**",
        "body": "Open"
    },
    {
        "title": "**Train the neural network**",
        "body": "in the project manager. In"
    },
    {
        "title": "**trainset**",
        "body": ", browse and choose the \"_trainset\" file. The defaults for everything else in this window are sufficient to produce good results.  To significantly shorten the length of the training \\(but potentially reduce the quality), reduce the number of iterations. Write the filename of the trained neural network output in the"
    },
    {
        "title": "**netout**",
        "body": "text box, and leave the"
    },
    {
        "title": "**from_trained**",
        "body": "box empty if it is the first training process. Note that if you have not configured Theano to use CUDA as described above, this will run on a single CPU and take a VERY long time.\r\n\n\nPress"
    },
    {
        "title": "**Launch**",
        "body": ". The program will print a few numbers quickly at the beginning \\(this is to monitor the training process. Something is wrong if it prints really huge values or takes more than a few seconds to print a number), and then will notify you once it's completed each iteration. When it's finished, it will output the trained neural network in the specified"
    },
    {
        "title": "**netout**",
        "body": "file and samples of the training result in a file called \"trainout_\" followed by the netout file name. \r\n\n\nAfter the training is finished, it is recommended to look at the training result before proceeding. Open the \"trainout_*.hdf\" file from the e2display window \\(use show stack), and you should see something like this. \r\n\n\n<a href=\"#figures\" data-url=\"http://www.nature.com/protocolexchange/system/uploads/5827/original/trainout.png\">See figure in Figures section.</a>\r\n\n\nZoom in or out a bit so there are 3*N images displayed in each row. For each three images, the first one is the ROI from the tomogram, the second is the corresponding manual segmentation, and the third is the neural network output for the same ROI after training. The neural network is considered well trained if the third image matches the second image. For the negative particles, both the second and the third images should be largely blank \\(the 3rd may contain some very weak features, this is ok). \r\n\n\nIf the training result looks somewhat wrong, go back and check your positive and negative training set first. Most significant errors are caused by training set errors, i.e. having some positive particles in the negative training set, or one of the positive training set is not correctly segmented. If the training result looks suboptimal \\(the segmentation is not clear enough but not totally wrong), you may consider continuing the training for a few rounds. To do this, go back to the"
    },
    {
        "title": "**Train the neural network**",
        "body": "panel, choose the previously trained network for the"
    },
    {
        "title": "**from_trained**",
        "body": "box and launch the training again. It is usually better to set a smaller learning rate in the continued training. Consider change value in the learnrate to ~0.001, or the displayed learning rate value at the last iteration of the previous training. \r\n\n\nIf you are satisfied with the result, go to the next step to segment the whole tomogram."
    },
    {
        "title": "**Apply to Tomograms**",
        "body": "Finally, open"
    },
    {
        "title": "**Apply the neural network**",
        "body": "panel. Choose the tomogram you used to generate the boxes in the tomograms box, choose the saved neural network file \\(not the \"trainout_\" file, which is only used for visualization), and set the output filename. You can change the number of threads to use by adjusting the"
    },
    {
        "title": "**thread**",
        "body": "option. Keep in mind that using more threads will consume more memory as the tomogram slices are read in at the same time. For example, processing a 1k x 1k x 512 downsampled tomogram on 10 cores would use <sub>5 GB of RAM. Processing an unscaled 4k x 4k x 1k tomogram would increase RAM usage to </sub>24 GB. When this process finishes, you can open the output file in your favourite visualization software to view the segmentation. \r\n\n\n<a href=\"#figures\" data-url=\"http://www.nature.com/protocolexchange/system/uploads/5829/original/segout3d.png\">See figure in Figures section.</a>\r\n\n\n\r\n\n\nTo segment a different feature, just repeat the entire process for the each feature of interest. Make sure to use different file names \\(eg - _good2 and _bad2)\\! The trained network should generally work well on other tomograms using a similar specimen with similar microscope settings \\(clearly the A/pix value must be the same)."
    },
    {
        "title": "**Merging multiple annotation results**",
        "body": "Merging the results from multiple networks on a single tomogram can help resolve ambiguities, or correct regions which were apparently misassigned. For example, in the microtubule annotation shown above, the carbon edge is falsely recognized as a microtubule. An extra neural network can be trained to  specifically recognize the carbon edge and its result can be competed against the microtubule annotation. A multi-level mask is produced after merging multiple annotation result in which the integer values in a voxel identify the type of feature the voxel contains. To merge multiple annotation results, simply run in the terminal:\r\n\n\nmergetomoseg.py"
    },
    {
        "title": "**annotation #1**",
        "body": []
    },
    {
        "title": "**annotation #2**",
        "body": "... --output"
    },
    {
        "title": "**output mask file**",
        "body": []
    },
    {
        "title": "**Tips in selecting training samples**",
        "body": "â€¢ Annotate samples correctly, as a bad segmentation in the training set can damage the overall performance. In the microtubule case, if you annotate the spacing between microtubules, instead of the microtubules themselves \\(it is actually quite easy to make such mistake when annotating microtubule bundles), the neural network can behave unpredictably and sometimes just refuse to segment anything. Here is the training result on an incorrect and correct segmentation in one training set. Note the top one \\(22) is annotating the space between microtubules. \r\n\n\n<a href=\"#figures\" data-url=\"http://www.nature.com/protocolexchange/system/uploads/5831/original/goodvsbadseg.png\">See figure in Figures section.</a>\r\n\n\nâ€¢ Make sure there are no positive samples in the negative training set. If your target feature is everywhere and it is hard to find negative regions, you can add additional positive samples which include various features other than the target feature \\(annotating only the target feature). \r\n\n\nâ€¢ You can bin your tomogram differently to segment different features. Just import multiple copies of raw tomogram with different shrink factors, and unbin the segmentation using math.fft.resample processor. It is particularly useful when you have features with different lengthscales in one tomogram, and it is impossible to both fit the large features into a 64*64 box and still have the smaller features visible at the same scale. \r\n\n\nâ€¢ In some cases, there is a significant missing wedge in the x-y plane slices \\(you can visualize this by clicking Amp button when looking at the slices in EMAN2). So the resolvability on x direction is different than that on y direction. It is important to provide features running in different directions in the training set, otherwise the neural net may only pick up features in one direction based on the Fourier patten. Also, you may want to check the stage of the microscope, since this may suggest the sample is not tilted exactly around the x axis. \r\n\n\nâ€¢ It is also vital to cover various states of the target feature. For example, if you want to segment single layer membranes, you may want to have some cell membrane, some small vesicles, and some vesicles with darker density inside, so the neural network can grab the concept of membrane. Just imagine how you would teach someone with no biological knowledge about the features you are looking for. On the other hand, it is possible to ask the neural network to separate different types of those same features. In the membrane example, it is possible to train the neural network to segment vesicles from cell membranes based on the curvature, or recognize dense vesicles based on the difference of intensity on both side of the membrane, given carefully picked training set."
    }
]