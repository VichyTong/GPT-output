[
    "**I. Physical modeling of low dimensional ferroelectrics**",
    "1.",
    "Determine your model system.",
    "You should ",
    "Determine the dimensionality of the system \\(i.e.",
    ", 0-D nanoplatelet 1-D nanowire and 2-D nanofilm), material, and electric and mechanical boundary conditions, which are recommended to be written as optional tags in your program.",
    "In this demo, we consider a PbTiO<sub>3</sub> ferroelectric nanoplatelet under surface traction and open-circuit condition as shown in **Figure 1**.\r\n  ",
    "2.",
    "Construct the system\u2019s free energy.",
    "In general, the free energy of a ferroelectric is a functional of polarization, and should incorporate the effects of polarization inhomogeneity, elastic and electric fields.",
    "It can be written as a sum of the bulk free energy \\(including a Landau-type potential, gradient energy, elastic energy and electric energy) and surface free energy.\r\n  ",
    "**Tip**: The construction of free energy is very important in phase-field model of ferroelectrics.",
    "The governing equation, i.e., the Time Dependent Ginzburg\u2013Landau \\(TDGL) equation, describes that the evolution of domain structure toward its equilibrium is driven by the decrease of the system\u2019s free energy.",
    "**Caution**: The free energy should be generally constructed under the thermodynamic framework.",
    "3. Design your experiment.",
    "In our case, the experiment is to ",
    "Apply mechanical loads to the nanoplatelet to affect its domain structure. \r\n  ",
    "**II.",
    "Programming**",
    "The ",
    "Flow diagram of phase-field simulation at a given condition \\(e.g., fixed temperature, open-circuited and mechanical load) is as shown in **Figure 2**.",
    "Followings are the main functional parts of the corresponding program.",
    "1.",
    "Initialization.",
    "In this part of program, the parameters and variables needed for simulation would be defined and initialized.",
    "It is recommended to write this part in a way that it can either use the default values of the parameters and variables or ",
    "Read them from in",
    "Put files. \r\n  ",
    "**Tip**: For numerical accuracy and convenience, it is recommended to make the parameters and variables dimensionless so that their values fall into a suitable range. ",
    " ",
    "2. Grid division of the system.",
    "This ",
    "Process would ",
    "Generate some tables, from which you can easily find out the information of the nodes and elements, such as its coordinates, adjacent nodes and elements.",
    "In our case, we make the following tables,\r\n  Tnode ----Each row stores a node\u2019s number, coordinates and adjacent elements, ",
    "Tnodes---- Each row stores a node\u2019s number and its adjacent nodes,",
    "Telement---- Each row stores an element\u2019s number, coordinates and its nodes.",
    "**Tip**: These tables can largely simplify the calculation of element stiffness matrices, element node displacement/potential vectors, and the assemblage of global stiffness matrices and displacement/potential vectors. ",
    "3.",
    "Calculation of element stiffness matrices and the assemblage of global stiffness matrices.",
    "In most cases, the stiffness matrices \\(including elastic and electric) can be considered unchanged during the process, therefore the calculation only need to be done by once. \r\n    ",
    "**Tip**: According to the boundary conditions, the computation size and accuracy requirement, the electric and elastic fields can be solved by different methods, such as conjugate gradient method \\(CGM), finite-element method \\(FEM), and fast Fourier transformation \\(FFT).",
    "For our case of a ferroelectric nanoplatelet with a moderate size, finite-element method is suitable to solve the electric and elastic fields.",
    "4.",
    "Calculation of the elastic field.",
    "Calculate the element node displacement vectors, and ",
    "Assemble them into the global node displacement vector.",
    "Solve the equation \\[K<sub>u</sub>]\\{U}=\\{F<sub>u</sub>}.",
    "This should be done at each step of polarization evolution. \r\n  ",
    "5.",
    "Calculation of the electric field.",
    "Calculate the element node potential vectors, and ",
    "Assemble them into the global node potential vector.",
    "Solve the equation \\[K<sub>\u03c6</sub>]\\{\u0424}=\\{F<sub>\u03c6</sub>}.",
    "This should be done at each step of polarization evolution. \r\n  ",
    "**Tip**: Iterative methods, e.g. the Gauss-Seidel iteration method, would be suitable to equations \\[K<sub>u</sub>]\\{U}=\\{F<sub>u</sub>} and \\[K<sub>\u03c6</sub>]\\{\u0424}=\\{F<sub>\u03c6</sub>}. ",
    "6.",
    "Calculation of the evolution force and polarization field at next step.",
    "Simple explicit difference methods or semi-implicit Fourier-spectral algorithms<sup>8</sup> can be used to solve the governing equation, i.e., the TDGL equation.\r\n  ",
    "7.",
    "Error analysis.",
    "Calculate the error between the polarization field at this step and next step.",
    "If the error is small enough, end program; otherwise, repeat steps 3-6. \r\n  ",
    "8.",
    "In",
    "Put and output.",
    "In our case, the in",
    "Put  includes a parameter file storing the value of parameters and a configuration file storing the initial polarization field.",
    "The out",
    "Put  includes a log file recording the monitoring information during the simulation and files storing the polarization field at selected steps.  \r\n  ",
    "**III.",
    "Simulation**",
    "We would like to simulate how the mechanical ",
    "Load affects the formation of domain structure in the nanoplatelet. ",
    "1. Prepare a set of parameter files.",
    "In our case, the parameter files differ only in the value of surface traction.  \r\n  ",
    "2.",
    "For each parameter files, compile and ",
    "Run the program. \r\n  ",
    "**Tip**: You can also make some modifications on the original program, so that the whole simulation can be fulfilled by running the program by once. ",
    "**IV.",
    "Result analysis & Post processing**",
    "At this stage, we assume that there is an out",
    "Put file storing the polarization field, e.g., p_final.txt.",
    "The file stores the node\u2019s number, its coordinates and the polarization components.",
    "Now we will show how to use MATLAB \\(http://www.mathworks.com) to visualize the domain structures. ",
    " ",
    "1. Start MATLAB. \r\n  ",
    "2.",
    "Import file p_final.txt into the Workspace as shown in Figure 3. \r\n  ",
    "3.",
    "Run the following commands to ",
    "Obtain a vector plot the domain structure as shown in **Figure 4a**, \r\n  ",
    " quiver3\\(p_final\\(:,3),p_final\\(:,2),p_final\\(:,4),p_final\\(:,6),p_final\\(:,5),p_final\\(:,7));",
    " axis equal; ",
    " axis off;",
    "4.",
    "Run the following commands to ",
    "Add a color plot of the polarization magnitude to **Figure 4a** as shown in **Figure 4b**,\r\n  ",
    " meshing=\\[10 3 30];",
    " nx=meshing\\(1)+1;",
    " ny=meshing\\(2)+1;",
    " nz=meshing\\(3)+1;",
    " m=0;",
    " for i=1:nx",
    "     for j=1:ny",
    "         for k=1:nz",
    "             m=m+1;",
    "             P\\(i,j,k)=\\(p_final\\(m,5)**p_final\\(m,5)+p_final\\(m,6)**p_final\\(m,6)+p_final\\(m,7)*p_final\\(m,7))^0.5;",
    "         end",
    "     end",
    " end",
    " \\[x,y,z]=meshgrid\\(\\[0:ny-1],\\[0:nx-1],\\[0:nz-1]);",
    " Xslice=\\[0,ny-1];Yslice=\\[0,nx-1];Zslice=\\[0,nz-1];",
    " ",
    "Hold on;h =slice\\(x,y,z,P,Xslice,Yslice,Zslice);",
    " set\\(h,'LineStyle','none');",
    "5. Change the colormap to your preference.",
    "For example, ",
    "Run the following commands to as shown in **Figure 4c**,\r\n  ",
    " color_round=\\[1 0 1];color_floor=\\[0 1 0];",
    " n_color=64;",
    " for i=1:n_color",
    "    map\\(i,1)=color_round\\(1)+\\(i-1)*\\(color_floor\\(1)-color_round\\(1))/\\(n_color-1);",
    "    map\\(i,2)=color_round\\(2)+\\(i-1)*\\(color_floor\\(2)-color_round\\(2))/\\(n_color-1);",
    "    map\\(i,3)=color_round\\(3)+\\(i-1)*\\(color_floor\\(3)-color_round\\(3))/\\(n_color-1);",
    " end",
    " colormap\\(map);"
]