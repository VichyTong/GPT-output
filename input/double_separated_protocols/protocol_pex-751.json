[
    "<p>*Note that all code within this protocol is <em>italicized</em> and has been written so it can be directly pasted into RStudio</p><p><br></p><p><strong><u>Load necessary packages:</u></strong></p><p><em>library(edgeR)</em></p><p><em>library(limma)</em></p><p><em>library(forcats)</em></p><p><em>library(ggplot2)</em><strong><em><u>\ufeff</u></em></strong></p><p><strong><em><u>\ufeff</u></em></strong></p><p><strong><u>Import the files:</u></strong></p><p>1.",
    "Set the RStudio working directory to the location of the gene counts and metadata files.</p><p>2.",
    "Import the gene counts file.",
    "<strong>Note:</strong>",
    "In the case of large datasets like the one used here, we recommend importing the gzipped (.gz) file.",
    "The software can unzip the file as it is imported, saving memory.",
    "Avoid viewing after opening the file and instead use the following to ",
    "Import :</p><p><em>library(readr)</em></p><p><em>tcga_RSEM_Hugo_norm_",
    "Count &lt;- read_delim(\"tcga_RSEM_Hugo_norm_count.gz\",&nbsp;</em></p><p><em>&nbsp;&nbsp;\"\\t\", escape_double = FALSE, trim_ws = TRUE)</em></p><p>3.",
    "Import the metadata file:</p><p><em>library(readr)</em></p><p><em>metadata &lt;- read_csv(\"metadata.csv\")</em></p><p><em>View(metadata)</em></p><p><br></p><p><strong><u>Prepare counts dataframe:</u></strong></p><p>1.",
    "Make a dataframe of the counts:</p><p><em>df &lt;- as.data.frame(tcga_RSEM_Hugo_norm_count)</em></p><p>2.",
    "Set the rownames equal to the first column, then delete the first column:</p><p><em>row.names(df) &lt;- df$sample</em></p><p><em>df$sample&lt;-NULL</em></p><p>3.",
    "Back-",
    "Transform the data.",
    "Gene counts are in units of Log2(counts+1) and we need just 'counts' as in",
    "Put for the downstream normalization:</p><p><em>df2 &lt;- 2^df</em></p><p><em>df3 &lt;- df2-1</em></p><p><em>df &lt;- df3</em></p><p><em>remove(df2)</em></p><p><em>remove(df3)</em></p><p>4.",
    "Check to ",
    "Ensure that the number of variables in the counts dataframe is equal to the number of observations in the metadata.",
    "It is critical these numbers are the same (here that number is 10,535 for each).<em>\ufeff</em></p><p><br></p><p><strong><u>Perform TMM normalization and Voom transformation:</u></strong></p><p><strong><em><u>\ufeff</u></em></strong><em>dge &lt;- DGEList(counts=df, group=metadata$Cohort)</em></p><p><em>",
    "Keep &lt;- rowSums(cpm(dge)&gt;1) &gt;= 3</em></p><p><em>dge &lt;- dge[keep, keep.lib.sizes=FALSE]</em></p><p><br></p><p><em>GD &lt;- factor(metadata$Cohort)</em></p><p><em>",
    "Design &lt;- model.matrix(~0+GD)\ufeff</em></p><p><em>dge &lt;- calcNormFactors(dge)</em></p><p><em>v &lt;- voom(dge,design,plot=TRUE)</em></p><p><em>",
    "Fit &lt;- lmFit(v, design)</em></p><p><br></p><p>*Note: these commands will generally have long (~5 minute) ",
    "Run times for a dataset of this magnitude.",
    "The steps will ",
    "Run more quickly if working with smaller data (a single cohort for example).</p><p><br></p><p><strong><u>Generate results as Log2(Normalized CPM+1):</u></strong></p><p>1.",
    "Generate the normalized counts per million (CPM):</p><p><em> TCGA_PanCan_CPM &lt;- cpm(dge)</em></p><p>2.",
    "Add pseudo",
    "Count of +1:</p><p><em>cpm_plus1 &lt;- TCGA_PanCan_CPM+1</em></p><p>3.",
    "Transform to Log2 scale:</p><p><em>Log2CPM_plus1_TCGA_PanCan &lt;- log2(cpm_plus1)</em></p><p><em>Log2CPM_plus1_TCGA_PanCan &lt;- as.data.frame(Log2CPM_plus1_TCGA_PanCan)</em></p><p><br></p><p><strong><u>Export the results:</u></strong></p><p><em>write.csv(Log2CPM_plus1_TCGA_PanCan, \"Log2CPM_plus1_TCGA_PanCan.csv\")</em></p><p>*Note: This will ",
    "Export a file approximately 5GB in size.",
    "To simply ",
    "Obtain the expression of a single gene of interest this step can be skipped and the protocol can be resumed at the next section.</p><p><br></p><p><strong><u>Obtain normalized expression of a single gene of interest across all cohorts:</u></strong></p><p>*Note: Ensure the row names are the same identifier type as gene of interest's input.",
    "(Gene symbol, Ensembl identifier, etc.)",
    "Here we use the gene CYP3A5 as an example.",
    "<strong><u>\ufeff</u></strong></p><p><em>Log2CPM1_CYP3A5 &lt;- Log2CPM_plus1_TCGA_PanCan[\"CYP3A5\",]</em></p><p><br></p><p><strong><u>Transpose and reformat to ",
    "Obtain a final dataframe having Sample ID, Expression, and Cohort:</u></strong></p><p><em>",
    "Log2CPM1_CYP3A5 &lt;- t(Log2CPM1_CYP3A5)</em></p><p><em>ID &lt;- row.names(Log2CPM1_CYP3A5)</em></p><p><em>Log2CPM1_CYP3A5 &lt;- cbind(Log2CPM1_CYP3A5,ID)</em></p><p><em>colnames(Log2CPM1_CYP3A5)[colnames(Log2CPM1_CYP3A5)==\"CYP3A5\"] &lt;- \"Log2CPM1_CYP3A5\"</em></p><p><br></p><p><em>merged &lt;- as.data.frame(merge(Log2CPM1_CYP3A5, metadata, by.x=\"ID\", by.y=\"ID\", all.x=TRUE))</em></p><p><br></p><p><strong><u>Change the expression values to numeric instead of a factor (to work correctly with plotting results):</u></strong></p><p><em>values_numeric &lt;- as.numeric(levels(merged$Log2CPM1_CYP3A5))[merged$Log2CPM1_CYP3A5]</em></p><p><em>merged &lt;- as.data.frame(cbind(merged, values_numeric))</em></p><p><em>colnames(merged)[colnames(merged)==\"values_numeric\"]&lt;-\"Log2CPM1_CYP3A5\"</em></p><p><br></p><p><em>merged$Log2CPM1_CYP3A5&lt;-NULL</em></p><p><br></p><p><em>merged_CYP3A5 &lt;- merged</em></p><p><br></p><p><strong><u>Export the expression results of GeneX across all cohorts:</u></strong></p><p><em>write.csv(merged_CYP3A5, \"merged_CYP3A5.csv\")</em></p><p><br></p><p><strong><u>Plot the results ranked by median expression:</u></strong></p><p><em>ggplot(merged_CYP3A5, aes(x = fct_reorder(Cohort, Log2CPM1_CYP3A5, .fun = median, .desc =FALSE,na.rm=TRUE), y = Log2CPM1_CYP3A5))",
    "+ geom_boxplot(color=\"steelblue4\", fill=\"steelblue4\",outlier.size=0.8, alpha=0.1, lwd=0.6, fatten=1) + theme(axis.text.x=element_text(angle=0, hjust=1, face=\"bold\", size=10), axis.text.y=element_text(face=\"bold\", size=10))",
    "+ geom_point(color=\"steelblue4\", size=0.8, alpha=0.1)+ theme_bw()+ coord_flip() + xlab(\"TCGA Cohort\")</em></p><p><br></p><p>*Note: Plots can be easily exported as high-quality SVG images from the RStudio interface.</p>"
]