[
    "<p><strong>Building a bioinformatic analysis platform on Windows 10</strong></p><p>The Windows Subsystem for Linux (WSL) allows users to install Linux subsystems directly on a Windows 10 system.",
    "It can easily run Linux commands and install Linux software to avoid the installation of third-party virtual machine software.",
    "The advantage of WSL is that it makes better use of computer memory and does not require copying files between the host and the virtual machine.</p><p><strong>",
    "Configuration of WSL</strong></p><p>",
    "Timing ~1 min</p><p>System requirements: Windows 10 Version 1709, Build 16299, or above 64-bit systems.</p><p>1.&nbsp;Enable WSL: Open \u201cSettings\u201d, click \u201cApps\u201d, then find and click \u201cPrograms and Features\u201d, click \u201cTurn Windows features on or off\u201d, find \u201cWindows Subsystem for Linux\u201d and check the box, click \u201cOK\u201d, and restart the computer (Supplementary Video 1).</p><p><strong>Install Linux</strong></p><p>Timing ~59 min</p><p>2.&nbsp;Open the Microsoft Store, search Ubuntu, and choose to install Ubuntu 18.04 LTS.",
    "Follow the prompts to set up your username and password.",
    "Here, we create an account with the username \u201cbio\u201d (Supplementary Video 2).",
    "When the installation is finished, we need to do some configuration on the system (Supplementary Video 3).</p><p>3.&nbsp;Enter the following command in the terminal to update the source:</p><p>\t$sudo apt-get update</p><p>4.&nbsp;Set the password for root.</p><p>\t$sudo passwd root</p><p>5.&nbsp;Enable the CUDA-aware MPI.</p><p>",
    "For Linux 64, the CUDA awareness support may be disabled by default.",
    "Users should enable the support by setting the environment variable to use OpenMPI.",
    "Check whether CUDA awareness support is enabled in the environment variable configuration file (~/.bashrc).",
    "If it is not enabled, enter the following commands in the terminal.</p><p>    $echo OMPI_MCA_opal_cuda_support=true &gt;&gt; ~/.bashrc</p><p>    $source ~/.bashrc\t</p><p>6.&nbsp;Installation of Miniconda</p><p>(A)&nbsp;&nbsp;Installation of Miniconda on Linux</p><p>    (i)&nbsp;Here, <a href=\"https://docs.conda.io/en/latest/miniconda.html\" rel=\"noopener noreferrer\" target=\"_blank\">Miniconda</a> will be installed; go to the <a href=\"https://docs.conda.io/en/latest/miniconda.html\" rel=\"noopener noreferrer\" target=\"_blank\">official website</a>, and select the installation file suitable for your system and Python version (Supplementary Video 4).</p><p>\t$wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh</p><p>   (ii)&nbsp;Start installation</p><p>\t$bash Miniconda3-latest-Linux-x86_64.sh</p><p>    Keep pressing \u201cEnter\u201d key when prompted to visualize the license agreement, enter \u201cyes\u201d and press \u201cEnter\u201d to continue.",
    "Press \u201cEnter\u201d to confirm the default installation location.",
    "Miniconda is installed in the miniconda3 directory, under the user\u2019s home directory.",
    "Type \u201cyes\u201d and press \u201cEnter\u201d to initialize miniconda3.",
    "Finally, type the command \u201csource ~/.bashrc\u201d in the terminal.</p><p>    $source ~/.bashrc</p><p>   (iii)&nbsp;Set up the Bioconda channel.",
    "Add the channels by entering the following three commands in the terminal.</p><p>\t$conda config --add channels defaults</p><p>    $conda config --add channels bioconda</p><p>    $conda config --add channels conda-forge</p><p>(B)&nbsp;&nbsp;Install Miniconda on MacOS</p><p>    (i)&nbsp;Installation of Miniconda3</p><p>\t$wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh</p><p>    $sh Miniconda3-latest-MacOSX-x86_64.sh</p><p>    $source ~/.bash_profile</p><p>   (ii)&nbsp;Add channels of Bioconda</p><p>\t$conda config --add channels defaults</p><p>   $conda config --add channels bioconda</p><p>   $conda config --add channels conda-forge</p><p><strong>Installation of PGCGAP (Supplementary Video 5).</strong></p><p>Timing ~34 min</p><p>7.&nbsp;Create a pgcgap environment for the installation of PGCGAP.</p><p>\t$conda create -n pgcgap python=3</p><p>8.&nbsp;Activate the pgcgap environment.</p><p>\t$conda activate pgcgap</p><p>9.&nbsp;Installation of PGCGAP.</p><p>\t$conda install pgcgap</p><p>10.",
    "Check if the dependent software packages were installed.</p><p>\t",
    "$pgcgap --check-external-programs</p><p>11.&nbsp;Set up the COG database.</p><p>\t$pgcgap --setup-COGdb</p><p>12.&nbsp;Exit the pgcgap environment.</p><p>\t$conda deactivate</p><p><strong>Step by Step examples</strong></p><p>Timing ~2.3 d</p><p>",
    "The usage and parameters of PGCGAP can be viewed by typing \u201cpgcgap -h\u201d in the terminal.",
    "Next, we show how to run all the modules of the PGCGAP through a dataset.</p><p>13.&nbsp;Download and decompress the example dataset.</p><p>\t$wget http://bcam.hzau.edu.cn/PGCGAP/PGCGAP_Examples.tar.gz</p><p>   $tar -zxvf PGCGAP_Examples.tar.gz</p><p>",
    "In this example, the working directory is located at the H drive.",
    "All hard disks in Windows were mounted in the \u201c/mnt\u201d directory of Ubuntu Linux.",
    "The \u201cPGCGAP_Examples/Reads/Illumia\u201d directory contains six Illumina Hiseq paired-end reads<em> </em>of<em> Escherichia coli</em>; the \u201cPGCGAP_Examples/Reads/Oxford\u201d directory contains the Oxford Nanopore reads of<em> Escherichia coli</em>",
    "K12; and the \u201cPGCGAP_Examples/Reads/PacBio\u201d directory contains the Pacific Biosciences released P6-C4 chemistry reads of<em> Escherichia coli</em> K12.",
    "\u201cPGCGAP_Examples/Reads/MG1655.gbff\u201d is the GenBank format file of <em>E. coli</em> K-12 <em>substr</em>.",
    "MG1655, and will be used as the reference genome.",
    "The \u201cPGCGAP_Examples/Reads/Hybrid\u201d directory contains two short reads files and one long reads file of the same strain.",
    "\u201cPGCGAP_Examples/Other_inputs/ proteins.fas\u201d contains 18 protein sequences of MFS transporter from several bacterial species.</p><p>14.&nbsp;Activate the pgcgap environment.</p><p>\t$conda activate pgcgap</p><p>15.&nbsp;Example 1: Genome assembly with Illumina reads.</p><p>Paired-end reads of six strains in the directory \u201cReads/Illumina/\u201d are used as inputs.",
    "In the dataset, the naming format of the genome is \u201cstrain_1.fastq.gz, \u201d and \u201cstrain_2.fastq.gz\u201d.",
    "The string after the strain name is \u201c_1.fastq.gz\u201d, and its length is 11, so \u201c--suffix_len\u201d was set to 11.",
    "Users can choose \u201cabyss\u201d, \u201cspades\u201d, and \u201cauto\u201d for genome assembly.",
    "The assembly speed with \u201cabyss\u201d is faster, and the assembly quality with \u201cspades\u201d is better.",
    "Taking into account the speed and quality of assembly, we suggest using the \u201cauto\u201d mode for assembly.",
    "\u201c--filter_length\u201d is set here to remove sequences shorter than 200 bp from the assembled genomes.</p><p>\t$pgcgap --Assemble --platform illumina --assembler abyss --filter_length 200 --ReadsPath Reads/Illumina --reads1 _1.fastq.gz",
    "--reads2 _",
    "2.fastq.gz --kmmer 81 --threads 4 --suffix_len 11</p><p>   $pgcgap --Assemble --platform illumina --assembler spades --filter_length 200 --ReadsPath Reads/Illumina --reads1 _1.fastq.gz",
    "--reads2 _",
    "2.fastq.gz --threads 4 --suffix_len 11</p><p>   $pgcgap --Assemble --platform illumina --assembler auto --filter_length 200 --ReadsPath Reads/Illumina --reads1 _1.fastq.gz",
    "--reads2 _",
    "2.fastq.gz --kmmer 81 --threads 4 --suffix_len 11</p><p>New directories and documents are generated after the program is completed.",
    "The assembly results for each genome are in the \u201cResults/Assembles/Illumina\u201d directory, while all scaffolds of the strains are stored in \u201cResults/Assembles/Scaf/Illumina\u201d.",
    "\u201c*.filtered.fas\u201d is the genome with short sequences removed.",
    "\u201c*.prefilter.stats\u201d describes the status of the genome before filtering, and \u201c*.filtered.stats\u201d describes the status of the genome after short sequence filtering.",
    "While \u201cabyss\u201d was chosen as the assembler, users are advised to check the assembly stats file (such as Results/Assembles/Illumina/SRR9620252_assembly/SRR9620252-stats.tab) of each genome to ensure that the value of N50 is greater than 50,000 bp.",
    "The file \u201cscaf.list\u201d under the working directory contains the absolute path of all genomes.</p><p>16.&nbsp;Example 2: Oxford reads assembly.</p><p>",
    "The Oxford nanopore produces only one read file (\u201cReads/Oxford/oxford.fasta\u201d), so only the parameter of \u201c--reads1\u201d needs to be set.",
    "Here, the value \u201c.fasta\u201d.",
    "\u201c--genomeSize\u201d is the estimated genome size, and users can check the genome size of similar strains in the NCBI database for reference.",
    "The parameter is set to \u201c4.8m\u201d.",
    "The suffix of the reads file here is \u201c.fasta\u201d and its length is 6, so \u201c--suffix_len\u201d is set to 6.</p><p>\t$pgcgap --Assemble --platform oxford --ReadsPath Reads/Oxford --reads1 .fasta --genomeSize 4.8m --threads 4 --suffix_len 6",
    "--filter_length 200</p><p>The results are stored in the \u201cResults/Assembles/Oxford\u201d and",
    "\u201cResults/Assembles/Scaf/Oxford\u201d directories.",
    "The former contains all intermediate files and genome files, while the latter contains only the assembled genome.</p><p>17.&nbsp;Example 3: PacBio reads assembly.</p><p>PacBio also produces only one read file (\u201cReads/PacBio/pacbio.fastq\u201d); the parameter settings are similar to those of Oxford.",
    "The strain name is \u201cpacbio\u201d with the suffix \u201c.fastq\u201d and the suffix length is 6, so \u201c--suffix_len\u201d was set to 6.</p><p>\t$pgcgap --Assemble --platform",
    "pacbio --ReadsPath Reads/PacBio --reads1 .fastq",
    "--genomeSize",
    "4.8m --threads 4 --suffix_len 6 --filter_length 200</p><p>",
    "The results are stored in the \u201cResults/Assembles/PacBio\u201d and \u201cResults/Assembles/Scaf/PacBio\u201d directories.",
    "The former contains all intermediate files and genome files, while the latter contains only the assembled genome.</p><p>18.&nbsp;Example 4: hybrid assembly of short reads and long reads.</p><p>Paired-end short reads and long reads in the directory \u201cReads/Hybrid/\u201d are used as inputs.",
    "Illumina reads and long reads had been obtained from the same isolates.</p><p>    $pgcgap --Assemble --platform hybrid --ReadsPath Reads/Hybrid --short1 short_reads_1.fastq.gz --short2 short_reads_2.fastq.gz --long long_reads_high_depth.fastq.gz --threads 4</p><p>The results are stored in the \u201cResults/Assembles/Hybrid\u201d directory, and the final assembly is named \u201cassembly.fasta\u201d.</p><p>19.",
    "Example 5: Gene prediction and annotation.</p><p>",
    "Here, the assembly results of Illumina reads are taken as inputs (\u201cResults/Assembles/Scaf/Illumina/*.fa\u201d).",
    "The suffix of the genome is \u201c-8.fa\u201d.",
    "When running the program, the value of the \u201c--Scaf_suffix\u201d parameter cannot be quoted.",
    "Here, -8.fa should not be quoted.</p><p>\t$pgcgap --Annotate --scafPath Results/Assembles/Scaf/Illumina --Scaf_suffix -8.fa",
    "--genus Escherichia --species",
    "\u201cEscherichia coli\u201d --codon 11 --threads 4</p><p>The generated files are stored in the \u201cResults/Annotations\u201d directory, and files in the directories \u201cResults/Annotations/AAs\u201d, \u201cResults/Annotations/CDs\u201d and \u201cResults/Annotations/GFF\u201d will be used for subsequent analysis.</p><p>20.&nbsp;Example 6: Constructing the single-copy core protein tree and core SNP tree.</p><p>The phylogenetic trees of single-copy core proteins and single-copy core gene SNPs will be constructed using the six <em>E. coli</em> genomes sequenced by Illumina as datasets.",
    "The input files are the amino acid sequence files (\u201cResults/Annotations/AAs/*.faa\u201d) and the nucleotide sequence files (\u201cResults/Annotations/CDs/*.ffn\u201d) obtained by genome annotation.",
    "Amino acid files and nucleotide files must be suffixed with \u201c.faa\u201d and \u201c.ffn\u201d, respectively.",
    "The \u201c.faa\u201d and \u201c.ffn\u201d files of the same strain should have the same prefix name.",
    "The name of protein IDs and gene IDs in the amino acid file and nucleotide file should start with the strain name.",
    "The Prokka<sup>14</sup> software was suggested to generate the input files.</p><p>\t$pgcgap --CoreTree --CDsPath Results/Annotations/CDs --AAsPath Results/Annotations/AAs --codon 11 --strain_num 6 --threads 4</p><p>The result files are stored in the \u201cResults/CoreTrees\u201d directory.",
    "\u201cALL.core.protein.*.support\u201d and \u201cALL.core.snp.*.support\u201d are the phylogenetic tree files of the single-copy core proteins and the core SNPs constructed with the best-fit model of evolution, respectively.",
    "Users can import these two files into MEGA<sup>32</sup> or iTOL<sup>33</sup> to view the topology.</p><p>21.&nbsp;Example 7: Constructing the single-copy core protein tree only.</p><p>If the \u201c--CDsPath\u201d was set to \u201cNO\u201d, the nucleotide files will not be needed, and the phylogenetic tree of core SNPs will not be constructed.</p><p>\t$pgcgap --CoreTree --CDsPath",
    "NO --AAsPath Results/Annotations/AAs --codon 11 --strain_num 6 --threads 4</p><p>22.&nbsp;Example 8: pan-genome analysis and phylogenetic tree construction.</p><p>GFF3 files (With \u201c.gff\u201d as the suffix) of each strain are placed into a directory (\u201cResults/Annotations/GFF/*.gff\u201d).",
    "They must contain the nucleotide sequence at the end of the file.",
    "Protein sequence files (one per species) in FASTA format under another directory are also needed (\u201cResults/Annotations/AAs/*.faa\u201d) if the parameter \u201c--PanTree\u201d is provided for constructing a phylogenetic tree.",
    "It should be noted that the \u201c*.gff\u201d file and the \u201c*.faa file must correspond.",
    "We strongly recommend using Prokka<sup>14</sup> to generate files.",
    "If the \u201c--Annotate\u201d function was run first, the files were generated automatically.</p><p>\t$pgcgap --Pan --codon 11 --strain_num 6 --threads 4 --GffPath Results/Annotations/GFF --PanTree --AAsPath Results/Annotations/AAs</p><p>The results are stored in the \u201cResults/PanGenome\u201d directory.",
    "A spreadsheet named \u201cgene_presence_absence.csv\u201d lists each gene and which samples contained it.",
    "Users can take the gene_presence_absence.csv file and a trait file to conduct pan-genome wide association studies with the Scoary<sup>34</sup> software.",
    "At the same time, some visual results (\u201c*.pdf\u201d) are also outputted.",
    "\u201cResults/PanGenome/Core/Roary.core.protein.",
    "BIC.AIC.AICc.HIVW+I+G4+F.raxml.support\u201d is the phylogenetic tree constructed based on the single-copy core proteins called by the Roary<sup>15</sup> software.",
    "\u201cHIVW+I+G4+F\u201d represent the best-fit model of evolution for the protein alignments according to AIC<sup>35</sup>, AICc, and BIC<sup>36</sup> statistical criteria.",
    "If the parameters \u201c--PanTree\u201d and \u201c--AAsPath\u201d were not provided, the phylogenetic tree would not be constructed.</p><p>23.&nbsp;Example 9: Inference of orthologous gene groups.</p><p>The input files are also the amino acid sequence files suffixed with \u201c.faa\u201d (\u201cResults/Annotations/AAs/*.faa\u201d).</p><p>\t$pgcgap --OrthoF --threads 4 --AAsPath Results/Annotations/AAs</p><p>The resulting files are placed in the \u201cResults/OrthoFinder/Results_orthoF\u201d directory.</p><p>24.&nbsp;Example 10: Compute whole-genome Average Nucleotide Identity.</p><p>The input file named \u201cscaf.list\u201d contains the absolute path of each genome, one per line.",
    "If the \u201c--Assemble\u201d function is run first, the list file is generated automatically.",
    "The value of the parameter \u201c--Scaf_suffix\u201d depends on the actual situation, here is \u201c-8.fa\u201d.</p><p>\t$pgcgap --ANI --threads 4 --queryL scaf.list --refL scaf.list --ANIO Results/ANI/ANIs --Scaf_suffix -8.fa</p><p>",
    "The results are stored in the \u201cResults/ANI\u201d directory.",
    "The file \u201cANI\u201d contains comparison information of genome pairs.",
    "The document is composed of five columns, each of which represents the query genome, reference genome, ANI value, count of bidirectional fragment mappings, and total query fragments.",
    "A heat map file \u201cANI_matrix.pdf\u201d is generated.</p><p>25.&nbsp;Example 11: Genome and metagenome similarity estimation using MinHash</p><p>",
    "This requires genome files (complete or draft) in a directory as inputs (Default: Results/Assembles/Scaf/Illumina).</p><p>\t$pgcgap --MASH --scafPath Results/Assembles/Scaf/Illumina --Scaf_suffix -8.fa</p><p>The results are stored in the \u201cResults/MASH\u201d directory.",
    "The file \u201cMASH\u201d shows the pairwise distance between pair genomes, and each column represents Reference-ID, Query-ID, Mash-distance, P-value, and Matching-hashes.",
    "A heat map file named \u201cMASH_matrix.pdf\u201d is generated to describe the similarity of each genome pair.</p><p>26.&nbsp;Example 12: COG annotation.</p><p>The input files are also the amino acid sequence files suffixed with \u201c.faa\u201d (\u201cResults/Annotations/AAs/*.faa\u201d).</p><p>    $pgcgap --pCOG --threads 4 --strain_num 6 --AAsPath Results/Annotations/AAs</p><p>The results are stored in the \u201cResults/COG\u201d directory.",
    "The super COG table of each strain (\u201c*.2Scog.table\u201d) and its plot (\u201c*.2Scog.table.pdf\u201d) will be generated.",
    "\u201cAll_flags_relative_abundances.table\u201d is a table containing the relative abundance of each flag for all strains, while \u201cAll_flags_relative_abundances.pdf\u201d is the corresponding visualization result.</p><p>27.&nbsp;Example 13: Variants calling and phylogenetic tree construction based on a reference genome.</p><p>The six genomes sequenced by Illumina were chosen as datasets (\u201cReads/Illumina/*.gz\u201d).",
    "<em>Escherichia coli</em> K-12 <em>substr</em>.",
    "MG1655 was selected as the reference genome and the reference file \u201cMG1655.gbff\u201d in the GenBank format is stored in the \u201cReads\u201d directory.",
    "The absolute path of the reference genome (here is \u201c/mnt/h/PGCGAP_Examples/Reads/MG1655.gbff\u201d) is required to run the program.</p><p>\t$pgcgap --VAR",
    "--threads 4 --refgbk /mnt/h/PGCGAP_Examples/Reads/MG1655.gbff --ReadsPath Reads/Illumina --reads1",
    "_1.fastq.gz",
    "--reads2 _",
    "2.fastq.gz",
    "--suffix_len 11 --strain_num 6 --qualtype sanger</p><p>The resulting files are stored in the \u201cResults/Variants\u201d directory, where the \u201cCore\u201d directory contains the core SNPs of all strains and their phylogenetic tree.</p><p>28.&nbsp;Example 14:",
    "Screening of contigs for antimicrobial and virulence genes</p><p>",
    "This requires genome files (complete or draft) in a directory as inputs (Default: Results/Assembles/Scaf/Illumina).",
    "Users can choose one of the following databases for analysis:",
    "argannot<sup>37</sup>, card<sup>38</sup>, ecoh<sup>39</sup>, ecoli_vf (<a href=\"https://github.com/phac-nml/ecoli_vf\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/phac-nml/ecoli_vf</a>), ncbi<sup>40</sup>, plasmidfinder<sup>41</sup>, resfinder<sup>42</sup>, and vfdb<sup>43</sup>.</p><p>    $pgcgap --AntiRes --scafPath Results/Assembles/Scaf/Illumina --Scaf_suffix -8.fa",
    "--threads 4 --db ncbi --identity 75 --coverage 50</p><p>",
    "The resulting files are stored in the \u201cResults/AntiRes\u201d directory.",
    "\u201c*.tab\u201d files are screening results of each strain, and the \u201csummary.txt\u201d file contains a matrix of gene presence/absence for all strains.</p><p>29.&nbsp;Example 15: Perform all analyses for paired-end reads.</p><p>Only the read file and reference file should be provided.",
    "For the sake of flexibility, the \u201cVAR\u201d function needs to be added.</p><p>\t$pgcgap --All --platform illumina --filter_length 200 --ReadsPath Reads/Illumina --reads1",
    "_1.fastq.gz",
    "--reads2 _",
    "2.fastq.gz",
    "--suffix_len 11 --kmmer 81 --genus Escherichia --species \u201cEscherichia coli\u201d --codon 11 --strain_num 6 --threads 4 --VAR --refgbk /mnt/h/PGCGAP_Examples/Reads/MG1655.gbff --qualtype sanger --PanTree</p><p>30.&nbsp;Example 16: Filter short sequences in the genome and assess the status of the genome.</p><p>\u201cAssess\u201d takes the assembled genomes as inputs.",
    "First, it assesses the stats of the genome; second, the sequences shorter than \u201c--filter_length\u201d are deleted from the genome.",
    "Finally, the stats of the filtered genome are assessed.",
    "The results files are stored in the same directory as the inputs.</p><p>    $pgcgap --ACC --Assess --scafPath Results/Assembles/Scaf/Illumina --Scaf_suffix",
    "-8.fa",
    "--filter_length 200</p><p>31.&nbsp;Example 17: Construct a phylogenetic tree based on multiple FASTA sequences in one file.   ",
    "</p><p>\u201cSTREE\u201d takes the file containing multiple-FASTA sequences as input.",
    "The parameter \u201c--bsnum\u201d represents the number of bootstraps.",
    "The results files will be stored in \u201cResults/STREE\u201d.",
    "The file \u201cproteins.fas.aln.gb.treefile\u201d contains the final phylogenetic tree.</p><p>    $pgcgap --STREE --seqfile Other_inputs/proteins.fas --seqtype p --bsnum 500 --threads 4</p>"
]